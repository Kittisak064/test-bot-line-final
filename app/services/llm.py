import os
from openai import OpenAI

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY","")
MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

_client = OpenAI(api_key=OPENAI_API_KEY)

BASE_SYSTEM = """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏û‡∏π‡∏î‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ üôÇ
‡∏Å‡∏é‡πÄ‡∏´‡∏•‡πá‡∏Å: ‡∏ï‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 'facts' ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏≤ ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ä‡∏ß‡∏ô‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°
‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î/‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏ä‡∏ß‡∏ô‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
‡∏Ñ‡∏≥‡πÅ‡∏ó‡∏ô: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ '‡∏Ñ‡∏∏‡∏ì‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤/‡∏Ñ‡∏∏‡∏ì‡∏û‡∏µ‡πà', ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á '‡∏´‡∏ô‡∏π/‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô' ‡∏ï‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó
"""

def build_system_prompt(persona: str = "", company: str = "") -> str:
    extra = []
    if persona:
        extra.append("‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å/‡∏™‡πÑ‡∏ï‡∏•‡πå: " + persona.strip())
    if company:
        extra.append("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó: " + company.strip())
    return BASE_SYSTEM + ("\n" + "\n".join(extra) if extra else "")

def ask_llm(user_text: str, facts: str, persona: str = "", company: str = "") -> str:
    system_prompt = build_system_prompt(persona, company)
    content = [
        {"role":"system","content": system_prompt},
        {"role":"user","content": f"‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {user_text}\n\nFacts (‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏≤):\n{facts}\n\n‡∏à‡∏á‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÅ‡∏ä‡∏ï‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡πÅ‡∏•‡∏∞‡∏¢‡∏∂‡∏î facts ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"},
    ]
    resp = _client.chat.completions.create(model=MODEL, messages=content, temperature=0.3, max_tokens=700)
    return resp.choices[0].message.content.strip()
