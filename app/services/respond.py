import os
from typing import Dict, Any
from openai import OpenAI
from app.utils.excel_loader import DATA, match_products_by_query, match_faq_by_query

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")

# ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
ADMIN_KEYWORDS = ["‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Ñ‡∏ô‡∏à‡∏£‡∏¥‡∏á", "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà", "‡∏Ç‡∏≠‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô"]

def _should_handover_to_admin(text: str) -> bool:
    tl = (text or "").lower()
    return any(k in tl for k in ADMIN_KEYWORDS)

def _build_system_prompt() -> str:
    persona = DATA["persona"]
    training = DATA["training_raw"]
    company  = DATA["company"]

    style = [
        f"‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏ä‡∏∑‡πà‡∏≠: {persona.get('‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô','‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó')}",
        f"‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {persona.get('‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤','‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤')}",
        f"‡πÇ‡∏ó‡∏ô: {persona.get('‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤','‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡πÄ‡∏ô‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠')}",
    ]

    firm_rules = [
        "‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤/SKU ‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
        "‡∏≠‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏ö‡∏ó (products, FAQ, training doc) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö requirement ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡∏Ñ‡∏∏‡∏¢‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
        "‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏°‡∏µ bullet ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÅ‡∏•‡∏∞‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ä‡∏ß‡∏ô‡∏Ñ‡∏∏‡∏¢/CTA ‡∏ï‡∏≤‡∏° instruction",
    ]

    company_bits = [f"{k}: {v}" for k,v in company.items()][:8]  # ‡πÄ‡∏≠‡∏≤‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏û‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô

    return "\n".join([
        "### ROLE",
        *style,
        "",
        "### COMPANY SNAPSHOT",
        *company_bits,
        "",
        "### HARD RULES",
        *[f"- {r}" for r in firm_rules],
        "",
        "### TRAINING GUIDELINE",
        training or "(‡πÑ‡∏°‡πà‡∏°‡∏µ)",
    ])

def _grounding_context(user_text: str) -> str:
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡∏±‡∏ö FAQ
    prod = match_products_by_query(DATA["products"], user_text, top_k=3)
    faqs = match_faq_by_query(DATA["faq"], user_text, top_k=3)

    prod_lines=[]
    for i,p in enumerate(prod,1):
        prod_lines.append(
            f"{i}) ‡∏ä‡∏∑‡πà‡∏≠: {p['name']} | ‡∏Ç‡∏ô‡∏≤‡∏î: {p['size']}{p['unit']} | ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢: {p['sale_price']} ‡∏ö‡∏≤‡∏ó | ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á: {p['shipping']} | ‡∏´‡∏°‡∏ß‡∏î: {p['category']}"
        )
    faq_lines=[]
    for i,f in enumerate(faqs,1):
        faq_lines.append(f"{i}) Q: {f['question']} | A: {f['answer']}")

    # Intent instruction (‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≤‡∏¢/‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢) ‚Äì ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß CTA
    intent_pre  = DATA["intents"]["pre_sale"]
    intent_post = DATA["intents"]["post_sale"]
    pre_hint  = "\n".join([f"- {i['how_to']} (CTA: {i['cta']})" for i in intent_pre[:3]])
    post_hint = "\n".join([f"- {i['how_to']} (CTA: {i['cta']})" for i in intent_post[:3]])

    return "\n".join([
        "### PRODUCT CANDIDATES",
        *(prod_lines or ["(‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á)"]),
        "",
        "### FAQ CANDIDATES",
        *(faq_lines or ["(‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á)"]),
        "",
        "### INSTRUCTION HINTS (pre-sale)",
        pre_hint or "(‡πÑ‡∏°‡πà‡∏°‡∏µ)",
        "",
        "### INSTRUCTION HINTS (post-sale)",
        post_hint or "(‡πÑ‡∏°‡πà‡∏°‡∏µ)"
    ])

async def generate_reply(user_text: str) -> Dict[str, Any]:
    # ‡∏ï‡∏£‡∏ß‡∏à admin takeover
    if _should_handover_to_admin(user_text):
        return {
            "text": "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ô‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ï‡πà‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‚è≥ ‡∏´‡∏≤‡∏Å‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ö‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞",
            "handover": True
        }

    sys_prompt = _build_system_prompt()
    context    = _grounding_context(user_text)

    prompt = (
        f"### USER\n{user_text}\n\n"
        f"### CONTEXT (‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á)\n{context}\n\n"
        "‡∏à‡∏á‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏´‡∏±‡∏™/SKU ‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤+‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏ô‡∏≠‡∏Ç‡∏±‡πâ‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
    )

    # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡∏Å‡πá fallback ‡πÄ‡∏õ‡πá‡∏ô rule-based
    if not OPENAI_API_KEY:
        # ‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å FAQ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        faqs = match_faq_by_query(DATA["faq"], user_text, top_k=1)
        if faqs:
            return {"text": faqs[0]["answer"], "handover": False}
        # ‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        prods = match_products_by_query(DATA["products"], user_text, top_k=3)
        if prods:
            lines = ["‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏°‡∏µ‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏Ñ‡πà‡∏∞ ‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞:"]
            for p in prods:
                lines.append(f"- {p['name']} ‚Ä¢ {p['sale_price']} ‡∏ö‡∏≤‡∏ó ‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á {p['shipping']} ‚Ä¢ ‡∏´‡∏°‡∏ß‡∏î {p['category']}")
            lines.append("‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡πÉ‡∏à‡∏£‡∏∏‡πà‡∏ô‡πÑ‡∏´‡∏ô ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ö‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πÄ‡∏õ‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ üòä")
            return {"text": "\n".join(lines), "handover": False}
        return {"text": "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡πà‡∏∞ ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏ö‡∏≠‡∏Å‡∏™‡πÄ‡∏õ‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏Å‡∏ô‡∏¥‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡πâ‡∏°‡∏™‡∏∏‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏∞ üòä", "handover": False}

    # ‡πÉ‡∏ä‡πâ OpenAI ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏Å‡∏£‡∏≠‡∏ö
    client = OpenAI(api_key=OPENAI_API_KEY)
    resp = client.chat.completions.create(
        model=os.getenv("AI_MODEL","gpt-4o-mini"),
        temperature=0.4,
        messages=[
            {"role":"system","content":sys_prompt},
            {"role":"user","content":prompt}
        ],
    )
    text = resp.choices[0].message.content.strip()
    # safety: ‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏∏‡∏î SKU
    for bad in ["SKU", "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏´‡∏±‡∏™"]:
        if bad in text:
            text = text.replace(bad, "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô")
    return {"text": text, "handover": False}
