import os
from typing import Dict, Any, List, Union
from openai import OpenAI

from app.utils.excel_loader import (
    search_products,
    list_promotions,
    search_faq,
    list_intent_instructions,
)

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

def _fmt_price(v) -> str:
    try:
        n = float(v)
        if n.is_integer():
            return f"{int(n):,}"
        return f"{n:,.2f}"
    except Exception:
        return str(v) if v is not None else "-"

def _render_product(p: Dict[str, Any]) -> str:
    # ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏ä‡∏ß‡πå "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏´‡πá‡∏ô‡∏ï‡∏£‡∏á ‡πÜ
    name = p.get("‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢") or p.get("‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å") or "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
    size = p.get("‡∏Ç‡∏ô‡∏≤‡∏î")
    unit = p.get("‡∏´‡∏ô‡πà‡∏ß‡∏¢")
    price = _fmt_price(p.get("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢"))
    price_full = _fmt_price(p.get("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ï‡πá‡∏°"))
    ship = _fmt_price(p.get("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á"))
    spec = f" ({size} {unit})" if size or unit else ""
    base = f"‡∏Ñ‡∏∏‡∏ì‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏ô‡πÉ‡∏à {name}{spec} ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞ üôÇ\n"
    price_line = f"‡∏£‡∏≤‡∏Ñ‡∏≤ {price} ‡∏ö‡∏≤‡∏ó" + (f" (‡∏õ‡∏Å‡∏ï‡∏¥ {price_full} ‡∏ö‡∏≤‡∏ó)" if price_full and price_full != price else "")
    ship_line = f"\n‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á {ship} ‡∏ö‡∏≤‡∏ó" if ship and ship != "-" else ""
    return base + price_line + ship_line

def _render_promotions(promos: List[Dict[str, Any]]) -> str:
    if not promos:
        return ""
    lines = []
    for idx, r in enumerate(promos[:5], 1):
        title = r.get("‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£") or r.get("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠") or r.get("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£") or "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô"
        detail = r.get("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î") or r.get("‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç") or ""
        lines.append(f"{idx}. {title} ‚Äî {detail}".strip(" ‚Äî"))
    return "üéâ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:\n" + "\n".join(lines)

def _fallback_llm(user_text: str, context: str) -> str:
    if not client:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ API key ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ß
        return ("‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏ô‡∏π‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏∞ üôè\n"
                "‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏ö‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏µ‡∏Å‡∏ô‡∏¥‡∏î‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞")

    sys = (
        "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏•‡∏µ‡∏Å‡πÑ‡∏ó‡∏¢ ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô "
        "‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏™‡∏ï‡πá‡∏≠‡∏Å/‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏° "
        "‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤ '‡∏Ñ‡∏∏‡∏ì‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤' ‡∏°‡∏µ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡∏û‡∏≠‡∏î‡∏µ ‡πÜ"
    )
    user = (
        f"‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {user_text}\n\n"
        f"‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ):\n{context}\n\n"
        "‡∏´‡∏≤‡∏Å‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°"
    )
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": sys},
                {"role": "user", "content": user},
            ],
            temperature=0.4,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏ä‡πâ‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß üôè ({e})"

async def generate_reply(user_text: str) -> Union[str, Dict[str, Any]]:
    """
    ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:
    1) ‡∏ñ‡∏≤‡∏°‡∏´‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‚Üí handover
    2) ‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó: ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‚Üí ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô ‚Üí FAQ
    3) ‡πÑ‡∏°‡πà‡∏û‡∏ö ‚Üí ‡πÉ‡∏´‡πâ LLM ‡∏ä‡πà‡∏ß‡∏¢ ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á '‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ß' (‡∏¢‡∏∂‡∏î context ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ)
    """
    # 1) Handover
    if any(k in user_text for k in ["‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", "‡∏Ñ‡∏ô‡∏à‡∏£‡∏¥‡∏á", "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠", "‡πÇ‡∏ó‡∏£", "‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô"]):
        return {"text": "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡πà‡∏∞ ‡∏´‡∏ô‡∏π‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏î‡∏π‡πÅ‡∏•‡∏ï‡πà‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞ üìû", "handover": True}

    # 2.1) ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    products = search_products(user_text)
    if products:
        # ‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡∏†‡∏≤‡∏û (‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏ä‡∏ß‡πå '‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤')
        p = products[0]
        text = _render_product(p)

        # ‡πÅ‡∏ô‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        promos = list_promotions()
        promo_text = _render_promotions(promos)
        if promo_text:
            text += "\n\n" + promo_text + "\n\n"
            text += "‡∏ñ‡πâ‡∏≤‡∏™‡∏ô‡πÉ‡∏à ‡∏´‡∏ô‡∏π‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞ ‚ú®"
        else:
            text += "\n\n‡∏´‡∏≤‡∏Å‡∏™‡∏ô‡πÉ‡∏à ‡∏´‡∏ô‡∏π‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏î‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‚ú®"
        return text

    # 2.2) ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô
    promos = list_promotions()
    if any(k in user_text for k in ["‡πÇ‡∏õ‡∏£", "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î", "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô", "promotion"]) and promos:
        return _render_promotions(promos)

    # 2.3) FAQ
    faqs = search_faq(user_text)
    if faqs:
        # ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏°‡∏ï‡∏ä‡πå
        ans = faqs[0].get("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö") or "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
        return f"‚ÑπÔ∏è {ans}"

    # 3) Fallback ‚Üí LLM (‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏à‡∏≤‡∏Å intent instruction ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    intents = list_intent_instructions()
    ctx = ""
    if intents["before"]:
        ctx += "‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≤‡∏¢:\n" + "\n".join(str(r) for r in intents["before"][:5]) + "\n\n"
    if intents["after"]:
        ctx += "‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏¢:\n" + "\n".join(str(r) for r in intents["after"][:5]) + "\n\n"

    return _fallback_llm(user_text, ctx)
