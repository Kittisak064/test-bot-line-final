import os, asyncio, datetime
from typing import Dict, List
from app.services.classify import classify
from app.services.llm import ask_llm
from app.utils.excel_loader import (
    load_all, search_products, search_faq, active_promotions_text,
    company_info_text, persona_text, search_knowledge, find_order_status, find_service_status
)

HUMAN_LABEL = os.getenv("HUMAN_ESCALATION_LABEL", "‡∏Ç‡∏≠‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")

DATA = load_all()  # preload

def render_product_facts(items: List[Dict]) -> str:
    lines = []
    for p in items:
        line = (
            f"- ‡∏£‡∏´‡∏±‡∏™: {p.get('‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢','')} | "
            f"‡∏ä‡∏∑‡πà‡∏≠: {p.get('‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢','')} (aka {p.get('‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å','')}) | "
            f"‡∏Ç‡∏ô‡∏≤‡∏î: {p.get('‡∏Ç‡∏ô‡∏≤‡∏î','')}{p.get('‡∏´‡∏ô‡πà‡∏ß‡∏¢','')} | "
            f"‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ï‡πá‡∏°: {p.get('‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ï‡πá‡∏°','')} | "
            f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢: {p.get('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢','')} | "
            f"‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á: {p.get('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á','')} | "
            f"‡∏´‡∏°‡∏ß‡∏î: {p.get('‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà','')}"
        )
        lines.append(line)
    return "\n".join(lines) if lines else ""

async def generate_reply(user_text: str) -> str:
    intent = classify(user_text)
    persona = persona_text(DATA)
    company = company_info_text(DATA)

    # Handover
    if intent == "handover":
        return f"‡∏´‡∏ô‡∏π‡πÇ‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏û‡∏¥‡∏°‡∏û‡πå '{HUMAN_LABEL}' ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏¥‡πâ‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏ß‡πâ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÇ‡∏ó‡∏£‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏∞ üôè"

    # Order / Tracking
    if intent == "‡πÄ‡∏ä‡πá‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå":
        status = find_order_status(DATA, user_text)
        if status:
            facts = "\n".join(f"- {k}: {v}" for k,v in status.items())
            return await asyncio.to_thread(ask_llm, user_text, facts, persona, company)
        return "‡∏´‡∏ô‡∏π‡∏Ç‡∏≠‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå/‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ üôÇ"
    if intent == "‡πÄ‡∏ä‡πá‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏":
        status = find_order_status(DATA, user_text)  # reuse (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏ô Orders)
        if status and ("‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏" in status or "Carrier" in status):
            facts = "\n".join(f"- {k}: {v}" for k,v in status.items())
            return await asyncio.to_thread(ask_llm, user_text, facts, persona, company)
        return "‡∏´‡∏ô‡∏π‡∏Ç‡∏≠‡πÄ‡∏•‡∏Ç‡∏û‡∏±‡∏™‡∏î‡∏∏/‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏Ñ‡πà‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏∞ üì¶"

    # Promotions
    if intent == "‡∏ñ‡∏≤‡∏°‡πÇ‡∏õ‡∏£":
        facts = active_promotions_text(DATA, today=datetime.date.today())
        return await asyncio.to_thread(ask_llm, user_text, facts, persona, company)

    # Product / Price / Shipping
    prods = search_products(DATA, user_text)
    if prods:
        facts = render_product_facts(prods[:6])
        return await asyncio.to_thread(ask_llm, user_text, facts, persona, company)

    # FAQ
    faq = search_faq(DATA, user_text)
    if faq:
        facts = "\n".join([f"- Q: {faq.get('‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°','')}", f"- A: {faq.get('‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö','')}"])
        return await asyncio.to_thread(ask_llm, user_text, facts, persona, company)

    # Knowledge base
    know = search_knowledge(DATA, user_text)
    if know:
        facts = "\n".join([f"- {k}: {v}" for k,v in know.items() if v])
        return await asyncio.to_thread(ask_llm, user_text, facts, persona, company)

    # Fallback: company/perona context
    base = (company or "") + "\n" + (persona or "")
    return await asyncio.to_thread(ask_llm, user_text, base, persona, company)
